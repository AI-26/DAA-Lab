#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Insertion Sort Function
void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

// Selection Sort Function
void selectionSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int minIdx = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIdx]) {
                minIdx = j;
            }
        }
        // Swap the found minimum element with the first element
        int temp = arr[minIdx];
        arr[minIdx] = arr[i];
        arr[i] = temp;
    }
}

// Function to print an array
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Function to generate a random array
void generateRandomArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 1000;  // Generate random numbers between 0 and 999
    }
}

int main() {
    int n = 1000;  // Set the array size for testing
    
    // Create two arrays for sorting with the same size
    int *arr1 = (int *)malloc(n * sizeof(int));
    int *arr2 = (int *)malloc(n * sizeof(int));

    // Generate random values for both arrays
    generateRandomArray(arr1, n);
    generateRandomArray(arr2, n);

    // Measure time for Insertion Sort
    clock_t start_time = clock();
    insertionSort(arr1, n);
    clock_t end_time = clock();
    double insertion_sort_time = ((double)(end_time - start_time)) / CLOCKS_PER_SEC;
    printf("Insertion Sort Time: %f seconds\n", insertion_sort_time);

    // Generate random values for Selection Sort (reset the array)
    generateRandomArray(arr2, n);

    // Measure time for Selection Sort
    start_time = clock();
    selectionSort(arr2, n);
    end_time = clock();
    double selection_sort_time = ((double)(end_time - start_time)) / CLOCKS_PER_SEC;
    printf("Selection Sort Time: %f seconds\n", selection_sort_time);

    // Free dynamically allocated memory
    free(arr1);
    free(arr2);

    return 0;
}
